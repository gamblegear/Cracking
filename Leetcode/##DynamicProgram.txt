1. These should always be a padding: int n = array.length => int[] dp = new int[n+1], and this padding should be initialized. Usually the first elements are paddings - like int[0] or the int[0][i] = ? || when initializing, the value could be 0, 1 or increamental, like Edit Distance

2. How many elements should be initialized will be decided by how far it tracks back in the equation
   eg: dp[i] = Math.max(dp[i-1], dp[i-2] + num[i-1]), then there should be 2 preparation elements since [i-2]
   
3. DP is iteration, not recursion

4. DP is to build from first to the last while recursion is to build from bottom up

5. Can use DP array to contain intermediate results and traverse the array later - when traversing, remember to start from behind the initialization part (think about the meaning of DP array and skip dp[0] when summarizing)

6. Padding can happend at the end of array / matrix to trigger the function to work - like maximal rectangle

7. How to play with DP values (1) calculate the difference

8. If operate on some "range" related problems - make a matrix of the same strings - and this will be a triangle, instead of square. the meaning of i and j would be the staring and ending point of substring. Check (Longest Palindrome Substring in DP solution)
