##TreeSummary.txt

1. Two kinds of recursions: recursion starts at the leaf or starts at the null node.

2. A typical thought in Tree is that, the sub-tree is yet another kind of tree.

3. HashMap is a good helper in tree problems. BUT must keep in mind that the return value of each recursive level
   may not be the same of the max/min value stored in the HashMap, which keeps (root, max/min). This is a little
   similar to the "min/max of a stack problem".

4. If Top-down approach is not convenient, say, need to recursively test whether to take the left child or right
   child, then can take a Bottom-up approach. This is also an iterative way.

5. Need to pay attention to the "processing order", whether it should be from right to left or from left to right.

6. When represent tree in array( int[] ), best practice to use "arrayStart" and "arrayEnd = arrays.length - 1" 

7. When making decisions (like comparing values) on leaf node, need to check if this is real leaf node (check Path Sum) - if decided to operate on leaf nodes, then should check not to push null nodes in queue for BFS - 
	(curr.left == null && curr.right == null && sumValue==sum)

8. change the structure of a tree is a dynamic process (flatten binary tree)

9. If there are more than one argument that I want to pass back, can use HashMap as an argument for record and return the most wanted value (baniry tree max path sum - with method in HashMap)

10. When return value that has "accumulated effect" , can use Helper to pass itermediate results and always operate on the root node (see lowest common ancester)

11. Tree problems can usually get solved in recursion. When tree - think about recursion first

12. Segment Tree - this is tree represented in array. The trick is to find the relations between root and children - say root is index, then left child is 2*index+1, right child is 2*index+2; When initialization, the size of tree is also important. The operations involved are mainly: construct segment tree, update segment tree and get range minimum. Details about implementations: (https://github.com/mission-peace/interview/blob/master/src/com/interview/tree/SegmentTreeMinimumRangeQuery.java) and ideaa at (https://www.youtube.com/watch?v=ZBHKZF5w4YU)

13. Binary Indexed Tree

13. Segment Tree - when implemented in array, how to to divide? Use mid of original array's low and high - this is because all indexes related should use original index and mid is to divide on the original array as well

14. Trie:
	<0> Trie node usually get defined separately - just like TreeNode and ListNode
	<1> Trie can be used in word checker, without requiring a dictionary, which stores all words
	<2> Time and space complexity to build a trie is O(NM), where N is number of strings and M is the longest length of a string
	<3> Time complexity for insert and search is O(M)
	<4> Bad part of trie is overhead to maintain trie's pointer

15. Binary Indexed Tree (Fenwick Tree)
    <1> Build Tree - flipping the right most bit of '1' and tell which is the current parent
    <2> Fill the tree - 7 = 2^2 + 2^1 + 2^0 = 6 + 1 => starting from nums[6] and the length is 1, which is sum(nums[6]) OR MORE EFFICIENTLY for each element in the array, update one by one by calling Get Next (nlogn)
    <3> Search tree - search for range [0,6] then starting from 7 in the tree, which starts at 1, not 0
    <4> Get parent - 1. get complement in 2s (revert 0 and 1, then plus 1); 2. AND it with original number; 3. substract from original number
    <4> Get next - 1. get complement in 2s (revert 0 and 1, then plus 1); 2. AND it with original number; 3. add to original number
    <5> Update tree - update the current tree node and its get next (logn) - during building, it's directly updating with the current value; during pure updating, it's updating with diff
    <6> Get Sum - the passed in parameters are Fenwick Tree and index for the original nums array
