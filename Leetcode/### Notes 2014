Best Time Stock I:
	1. Keep record of the best price at the moment and then slide the pointer

Best Time Stock II:
	1. Find the ascend array

Best Time Stock III:
	1. DP - what is DP, DP is to use another array/2-D array to keep the intermediate value (usually this value is the difference of)
	2. Use two seperate arrays to keep the difference, one is from left and another is from the right, this step is the same idea as Best Time Stock I
	3. The idea to count from both two sides is to make sure they dont overlap

Binary Tree In-order traverse:
	1. Stack<> stack = new Stack<>(), or can use List's addFirst, addLast, removeFirst, removeLast
	
Symmetric Tree:
	1. Split the tree into two parts - left and right
	2. Iterative way is to list all the situations

Minimum Depth of Binary Tree:
	1. If a node has one child (left or right), then this node is NOT leaf node
	
Largest BST in a Binary Tree:
	1. Two approaches - 
		(1) top down, start from each node and check if it's BST, O(n^2)
		(2) bottom up, recursively and keep a TreeNodeHelper(TreeNode root, int BSTSize, int max, int min, boolean isBST), O(n)
	2. When doing BST, always need to keep track of maxValue and minValue - from the definition of BST
	3. If right child isBST == true, need to if the subtree with root node's isBST value

Convert Sorted List to Binary Search Tree:
	1. Use a runner and walker to find the middle node of List
	2. Keep a slow.next = node at beginning, in order to break the list into 2 sub-list
	3. ATTENTION: when dividing a list, think about the situation of only one node
	
Converted Sorted Array to Binary Search Tree:
	1. To find the middle number, use (start + end)/2
	
Construct Binary Tree from Preorder and Inorder Traversal 
	1. The first node from Preorder is the root, use this root to divide trees into left and right by inorder (evrerything left to root will be left subtree in inorder)
	2. Index matters, so maintain a HashMap for inorder

Construct Binary Tree from Inorder and Postorder Traversal 
	1. Same idea as previous one

Add Binary:
	1. This is mainly trick with String - toArray(), charAt(), Integer.toString(), String=""
	2. num.charAt(pt) - '0'
	3. Deal with sring1, string2 and carry

Add Two Numbers:
	1. The same idea with "Add Binary" - difference is LinkedList

Same Tree:
	1. Recursively compare two trees
	2. The Base condition is null, remember to return false when one is null while another is NOT null

**Recover Binary Search Tree: (constant space)
	1. Use inorder traverse for all nodes and keep a "prev" node
	2. Dealing with two nodes - think about the relative positions of the two nodes - next to each other or on different branches of the tree. So we will keep track of TWO nodes at the first exception (prev and root), and if we have another exception, we will update the second TreeNode to be root
	3. Traversing a tree iteratively or recursively will both take O(n) space. Morris Traversal will take O(1) space

sqrt()
	1. Binary Search between 0 and (n/2+1)
	2. Since this is integer, mid*mid > target and (mid-1)*(mid-1) < target

Unique Binary Search Trees
	1. This is DP problem
	2. BST has its order, we need to filter out a clue to parse the question - here we use the root of BST - each node in the string could be the root of BST
	3. Once we set the root, we only care about its left sub tree and right sub tree

Unique Binary Search Trees II
	1. Same idea as the previous one, but each time we return ArrayList<TreeNode>
	2. To parse the tree into two sub trees: pass in (start, end) - (start, i-1) and (i+1, end)
	3. Technical part: for(TreeNode node: nodes), if nodes.add(null), still we can go into this loop with node = null

Populating Next Right Pointers in Each Node
	1. This is to provide another way to traverse the tree in 2D - use a slider to slide from the top along left children and use another one to go from left to right

Subsets:
	1. Think about how to construct subsets - made of sets of different lengths
	2. Use an index to run for different arrays

Anagrams:
	1. String.toCharArray(); LinkedList.toArray(); ArrayList.toArray();
	2. HashMap containsKey
	3. a = array.toString() and b = new String(array) are different - b contains "" while a does not

Swap Nodes in Pairs:
	1. Can use recursion on strings as well
	2. Recurion is from end to head, so that we can avoid the difficulty in finding the previous node
	3. Of course, I can use iterative way

Rotate List:
	1. Get to the end of list when counting the length
	2. Create a start node as a cutter and cut at the proper position
	3. When doing modular, HAVE TO think about negative numbers, ZERO and positive numbers

Merge K Sorted List:
	1. Use a PriorityQueue to store/sort the first node of each list
	2. When polling from a Collection, need to declare a new Node to take it

Valid Number:
	1. The problem description is not clear. So need to figure out all the situations - what is a valid number? what would the input be like (with white space at the beginning and end of the string)
	2. Use lots of flags to denote "hasDot", "hasE", "hasNumber"...
	3. str.charAt(i) >= '0' && str.charAt(i) <= '0'

String to Integer (atoi):
	1. tmp = (int) str.charAt(pos) - '0'
	2. Pay attention to positive and negative numbers

Pow(x, n)
	1. discuss if n in (-1, 0, 1, 2) and use recursion

Reverse Integer:
	1. Make good use of divide and modular for number related questions
	2. INTEGER related questions - Think about "+-" and overflow
	3. abs(Integer.MAX_VALUE) = abs(Integer.MIN_VALUE) - 1, so sometimes, should compare separately

Plus One:
	1. Carefully review the behavior of +1
	2. In numbers, pay attention to the numeric values, like 9 (potential carry over)
	2. Discuss from w/o carry over

Permutation:
	1. The recursive method is similar to subset - need to use a visited[] to tag
	2. We are not using HashSet for this, because HashSet don't have a proper remove method
	3. HashSet's add, move and contains all returns boolean
	4. OR we can do insert at different positions and traverse the array from the first element to the last
	5. In the insertion method, we can just do it sequentially, because inserting will grow the list and permute it

Permutation Sequence:
	1. Need to find hidden clues

Next Permutation:
	1. The idea rocks, also execute on digits

Palindrome Number:
	1. WHENEVER seeing an "int" in the argument list, think about negative, zero and positive
	2. Use the while loop to calculate the divide (1, 10, 100...)
	3. Use / and % to pick the highest digit and lowest digit

Multiply Strings:
	1. StringBuilder can be modified - mostly used for .append(), .reverse() and .toString()
	2. The obstacle is the least significant digit is at the end of the string - need to reverse it
	3. Follow the steps as how to do mutilply manually and also think about carry
	4. Need to insert at the beginning of StringBuilder
	5. Care about 0s at the beiginning of StringBuilder and use deleteCharAt(). Afther this, check sb.length() == 0 ? "0" : sb.toString();

Dijkstra's Algorithm:
	1. class Vertex implements Comparable<Vertex> {... public int compareTo (Vertex other) ...}
	2. Rewrite toString and optionally rewrite hashCode and equals
	3. Vertex has a list of Edges and keeps its previous vertex
	4. Use a PriorityQueue<Vertex>. Whenever needs to update a minDistance, need to remove the vertex from PQueue first and add the updated version

A* Algorithm:
	1. f(n) = g(n) + h(n). g() is the cost for a move and h(n) is the estimation, the key part
	2. When in a vertex, check all its neighbors and find the one with min f(n)
	3. If f(n) is designed to be smaller than actual value, A* can for sure find the shorted path

Max Flow:
	1. The key idea is Residual Network and Reversed Arc (works as a cancellation for previous chosen path)
	2. Steps:
		2.1. Find a path to destination in either DFS or BFS
		2.2. Build Residual Network and Reversed Arc based on the previous path
		2.3. Find a new path to destination

Minimun Spanning Tree:
	1. Using HashSet and PriorityQueue will save a lot of efforts
	2. addAll(), containsAll(), retainAll() - intersaction, toArray()

Difference between DFS and BFS:
	1. DFS goes deep by passing the current node and the visited matrix: DFS(int node, boolean[] Visted)
	2. BFS goes wide by keeping a Queue, but still needs node and matrix: BFS(int node, boolean[] Visited)

LRU:
	map.size()

DYNAMICA PROGRAMMING

Decode Ways:
	1. Error points: char is '' while String is ""; The length of array should be longer than actual size
	2. Set a helper function, isValid() to do validation and use Integer.parseInt() to convert char to int
	3. Dynamic Programming for this one:
		2.1. Need to create Arrays - should be one more than actual numbers - to hold starting value
		2.2. Starting value like dp[0] and dp[1] should be discussed separately
		2.3. One Dimention DP usually takes into consideration of a[i-1] and a[i-2]
